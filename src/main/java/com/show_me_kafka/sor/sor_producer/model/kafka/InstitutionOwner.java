/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.show_me_kafka.sor.sor_producer.model.kafka;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class InstitutionOwner extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8200727915996536058L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InstitutionOwner\",\"namespace\":\"com.show_me_kafka.sor.sor_producer.model.kafka\",\"fields\":[{\"name\":\"SorIdentifier\",\"type\":\"string\"},{\"name\":\"EntityName\",\"type\":\"string\"},{\"name\":\"EntityTypeIdentifier\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InstitutionOwner> ENCODER =
      new BinaryMessageEncoder<InstitutionOwner>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InstitutionOwner> DECODER =
      new BinaryMessageDecoder<InstitutionOwner>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<InstitutionOwner> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<InstitutionOwner> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InstitutionOwner>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this InstitutionOwner to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a InstitutionOwner from a ByteBuffer. */
  public static InstitutionOwner fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence SorIdentifier;
  @Deprecated public java.lang.CharSequence EntityName;
  @Deprecated public java.lang.CharSequence EntityTypeIdentifier;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InstitutionOwner() {}

  /**
   * All-args constructor.
   * @param SorIdentifier The new value for SorIdentifier
   * @param EntityName The new value for EntityName
   * @param EntityTypeIdentifier The new value for EntityTypeIdentifier
   */
  public InstitutionOwner(java.lang.CharSequence SorIdentifier, java.lang.CharSequence EntityName, java.lang.CharSequence EntityTypeIdentifier) {
    this.SorIdentifier = SorIdentifier;
    this.EntityName = EntityName;
    this.EntityTypeIdentifier = EntityTypeIdentifier;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return SorIdentifier;
    case 1: return EntityName;
    case 2: return EntityTypeIdentifier;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: SorIdentifier = (java.lang.CharSequence)value$; break;
    case 1: EntityName = (java.lang.CharSequence)value$; break;
    case 2: EntityTypeIdentifier = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'SorIdentifier' field.
   * @return The value of the 'SorIdentifier' field.
   */
  public java.lang.CharSequence getSorIdentifier() {
    return SorIdentifier;
  }

  /**
   * Sets the value of the 'SorIdentifier' field.
   * @param value the value to set.
   */
  public void setSorIdentifier(java.lang.CharSequence value) {
    this.SorIdentifier = value;
  }

  /**
   * Gets the value of the 'EntityName' field.
   * @return The value of the 'EntityName' field.
   */
  public java.lang.CharSequence getEntityName() {
    return EntityName;
  }

  /**
   * Sets the value of the 'EntityName' field.
   * @param value the value to set.
   */
  public void setEntityName(java.lang.CharSequence value) {
    this.EntityName = value;
  }

  /**
   * Gets the value of the 'EntityTypeIdentifier' field.
   * @return The value of the 'EntityTypeIdentifier' field.
   */
  public java.lang.CharSequence getEntityTypeIdentifier() {
    return EntityTypeIdentifier;
  }

  /**
   * Sets the value of the 'EntityTypeIdentifier' field.
   * @param value the value to set.
   */
  public void setEntityTypeIdentifier(java.lang.CharSequence value) {
    this.EntityTypeIdentifier = value;
  }

  /**
   * Creates a new InstitutionOwner RecordBuilder.
   * @return A new InstitutionOwner RecordBuilder
   */
  public static com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder newBuilder() {
    return new com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder();
  }

  /**
   * Creates a new InstitutionOwner RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InstitutionOwner RecordBuilder
   */
  public static com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder newBuilder(com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder other) {
    return new com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder(other);
  }

  /**
   * Creates a new InstitutionOwner RecordBuilder by copying an existing InstitutionOwner instance.
   * @param other The existing instance to copy.
   * @return A new InstitutionOwner RecordBuilder
   */
  public static com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder newBuilder(com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner other) {
    return new com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder(other);
  }

  /**
   * RecordBuilder for InstitutionOwner instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InstitutionOwner>
    implements org.apache.avro.data.RecordBuilder<InstitutionOwner> {

    private java.lang.CharSequence SorIdentifier;
    private java.lang.CharSequence EntityName;
    private java.lang.CharSequence EntityTypeIdentifier;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.SorIdentifier)) {
        this.SorIdentifier = data().deepCopy(fields()[0].schema(), other.SorIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.EntityName)) {
        this.EntityName = data().deepCopy(fields()[1].schema(), other.EntityName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EntityTypeIdentifier)) {
        this.EntityTypeIdentifier = data().deepCopy(fields()[2].schema(), other.EntityTypeIdentifier);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing InstitutionOwner instance
     * @param other The existing instance to copy.
     */
    private Builder(com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.SorIdentifier)) {
        this.SorIdentifier = data().deepCopy(fields()[0].schema(), other.SorIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.EntityName)) {
        this.EntityName = data().deepCopy(fields()[1].schema(), other.EntityName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EntityTypeIdentifier)) {
        this.EntityTypeIdentifier = data().deepCopy(fields()[2].schema(), other.EntityTypeIdentifier);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'SorIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getSorIdentifier() {
      return SorIdentifier;
    }

    /**
      * Sets the value of the 'SorIdentifier' field.
      * @param value The value of 'SorIdentifier'.
      * @return This builder.
      */
    public com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder setSorIdentifier(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.SorIdentifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'SorIdentifier' field has been set.
      * @return True if the 'SorIdentifier' field has been set, false otherwise.
      */
    public boolean hasSorIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'SorIdentifier' field.
      * @return This builder.
      */
    public com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder clearSorIdentifier() {
      SorIdentifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'EntityName' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityName() {
      return EntityName;
    }

    /**
      * Sets the value of the 'EntityName' field.
      * @param value The value of 'EntityName'.
      * @return This builder.
      */
    public com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder setEntityName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.EntityName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'EntityName' field has been set.
      * @return True if the 'EntityName' field has been set, false otherwise.
      */
    public boolean hasEntityName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'EntityName' field.
      * @return This builder.
      */
    public com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder clearEntityName() {
      EntityName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'EntityTypeIdentifier' field.
      * @return The value.
      */
    public java.lang.CharSequence getEntityTypeIdentifier() {
      return EntityTypeIdentifier;
    }

    /**
      * Sets the value of the 'EntityTypeIdentifier' field.
      * @param value The value of 'EntityTypeIdentifier'.
      * @return This builder.
      */
    public com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder setEntityTypeIdentifier(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.EntityTypeIdentifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'EntityTypeIdentifier' field has been set.
      * @return True if the 'EntityTypeIdentifier' field has been set, false otherwise.
      */
    public boolean hasEntityTypeIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'EntityTypeIdentifier' field.
      * @return This builder.
      */
    public com.show_me_kafka.sor.sor_producer.model.kafka.InstitutionOwner.Builder clearEntityTypeIdentifier() {
      EntityTypeIdentifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InstitutionOwner build() {
      try {
        InstitutionOwner record = new InstitutionOwner();
        record.SorIdentifier = fieldSetFlags()[0] ? this.SorIdentifier : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.EntityName = fieldSetFlags()[1] ? this.EntityName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.EntityTypeIdentifier = fieldSetFlags()[2] ? this.EntityTypeIdentifier : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InstitutionOwner>
    WRITER$ = (org.apache.avro.io.DatumWriter<InstitutionOwner>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InstitutionOwner>
    READER$ = (org.apache.avro.io.DatumReader<InstitutionOwner>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
